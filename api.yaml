# open this file up in https://editor.swagger.io/
# to read the documentation
# You can also generate code implementing this API using the buttons at the top
openapi: "3.0.1"
info:
  description: "A banking application API"
  version: "1.0.0"
  title: "Avocado Toast"
servers:
  - url: https://avocado-toast.wp6.pw/api
tags:
- name: "user"
  description: "Operations involving users"
- name: "transaction"
  description: "Money transactions"
paths:
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in banker."
      operationId: "createUser"
      requestBody:
        description: "Created user object"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              title: "CreateUserObject"
              required:
                - name
                - username
                - ssn
                - accountType
              properties:
                name:
                  type: "string"
                username:
                  type: "string"
                password:
                  type: "string"
                  format: "password"
                ssn:
                  type: "string"
                accountType:
                  $ref: '#/components/schemas/AccountType'
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    get:
      tags:
      - "user"
      summary: "get a list of all availible users"
      description: ""
      operationId: "getUserList"
      parameters:
      - name: "accountType"
        in: "query"
        description: "the type of user account to look up"
        required: true
        schema:
          $ref: '#/components/schemas/AccountType'
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
  /user/login:
    post:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      requestBody:
        description: "Created user object"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              title: "LoginParameters"
              required:
              - username
              - password
              properties:
                password:
                  description: "The password for login in clear text"
                  type: "string"
                  format: "password"
                userName:
                  type: "string"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: "Invalid username/password supplied"
  /ledger/by-user/{userId}:
    post:
      tags:
        - "transaction"
        - "user"
      summary: "Submit a new transaction for the user"
      operationId: "createUserTransaction"
      parameters:
      - in: "path"
        name: "userId"
        description: "ID of a valid user"
        required: true
        schema:
          type: "integer"
          format: "int64"
      requestBody:
        description: "Created transaction object"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              title: "TransactionInput"
              required:
                - merchant
                - amount
              properties:
                merchant:
                  type: "string"
                amount:
                  type: "number"
      responses:
        default:
          description: "Transaction successfully submitted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LedgerEntry"
        400:
          description: "Insufficent funds"
    get:
      tags:
      - "user"
      - "transaction"
      summary: "Gets a list of transactions & an overall balance for a user"
      operationId: "getUserTransactions"
      parameters:
      - in: "path"
        schema:
          type: "integer"
          format: "int64"
        name: "userId"
        description: "ID of a valid user"
        required: true
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                title: "UserTransactions"
                type: "object"
                required:
                  - balance
                  - transactions
                properties:
                  balance:
                    type: "number"
                  transactions:
                    description: "List of transactions in order from most recent to least recent"
                    type: "array"
                    items:
                      "$ref": "#/components/schemas/LedgerEntry"
  /ledger/by-date/{date}:
    get:
      tags:
      - "user"
      - "transaction"
      summary: "Gets a list of transactions & overall cashflow for the bank on the given date"
      operationId: "getDayTransactions"
      parameters:
      - in: "path"
        schema:
          type: "string"
          format: "date"
        name: "date"
        description: "Day to get transactions for"
        required: true
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "object"
                title: "DailyTransactions"
                required:
                  - cashFlow
                  - transactions
                properties:
                  cashFlow:
                    description: "Sum of the value of all the transactions on the given date"
                    type: "number"
                  transactions:
                    description: "List of transactions in order from most recent to least recent"
                    type: "array"
                    items:
                      "$ref": "#/components/schemas/LedgerEntry"
components:
  schemas:
    LedgerEntry:
      type: "object"
      required:
        - id
        - userId
        - merchant
        - dateTime
        - amount
      properties:
        id:
          type: "integer"
          format: "int64"
        userId:
          type: "integer"
          format: "int64"
        merchant:
          type: "string"
        amount:
          type: "number"
        dateTime:
          type: "string"
          format: "date-time"
          example: "2019-03-02T00:58:59Z"
    AccountType:
      type: "string"
      enum:
        - "banker"
        - "customer"
        - "analysist"
    User:
      type: "object"
      required:
        - id
        - name
        - username
        - ssn
        - accountType
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        username:
          type: "string"
        password:
          type: "string"
          format: "password"
        ssn:
          type: "string"
        accountType:
          $ref: '#/components/schemas/AccountType'
