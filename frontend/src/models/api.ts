/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.14.0 (NJsonSchema v9.13.18.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:3000/api";
    }

    /**
     * Create user
     * @param body Created user object
     * @return successful operation
     */
    createUser(body: Body): Promise<User> {
        let url_ = this.baseUrl + "/user";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateUser(_response);
        });
    }

    protected processCreateUser(response: Response): Promise<User> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? User.fromJS(resultData200) : new User();
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<User>(<any>null);
    }

    /**
     * get a list of all availible users
     * @param accountType the type of user account to look up
     * @return successful operation
     */
    getUserList(accountType: AccountType): Promise<User[]> {
        let url_ = this.baseUrl + "/user?";
        if (accountType === undefined || accountType === null)
            throw new Error("The parameter 'accountType' must be defined and cannot be null.");
        else
            url_ += "accountType=" + encodeURIComponent("" + accountType) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUserList(_response);
        });
    }

    protected processGetUserList(response: Response): Promise<User[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(User.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<User[]>(<any>null);
    }

    /**
     * Logs user into the system
     * @param body Created user object
     * @return successful operation
     */
    loginUser(body: Body2): Promise<User> {
        let url_ = this.baseUrl + "/user/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLoginUser(_response);
        });
    }

    protected processLoginUser(response: Response): Promise<User> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? User.fromJS(resultData200) : new User();
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<User>(<any>null);
    }

    /**
     * Submit a new transaction for the user
     * @param userId ID of a valid user
     * @param body Created transaction object
     * @return Transaction successfully submitted
     */
    createUserTransaction(userId: number, body: Body3): Promise<LedgerEntry> {
        let url_ = this.baseUrl + "/ledger/by-user/{userId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateUserTransaction(_response);
        });
    }

    protected processCreateUserTransaction(response: Response): Promise<LedgerEntry> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 400) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else {
            return response.text().then((_responseText) => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = resultDatadefault ? LedgerEntry.fromJS(resultDatadefault) : new LedgerEntry();
            return resultdefault;
            });
        }
    }

    /**
     * Gets a list of transactions & an overall balance for a user
     * @param userId ID of a valid user
     * @return successful operation
     */
    getUserTransactions(userId: number): Promise<UserTransactions> {
        let url_ = this.baseUrl + "/ledger/by-user/{userId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUserTransactions(_response);
        });
    }

    protected processGetUserTransactions(response: Response): Promise<UserTransactions> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? UserTransactions.fromJS(resultData200) : new UserTransactions();
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserTransactions>(<any>null);
    }

    /**
     * Gets a list of transactions & overall cashflow for the bank on the given date
     * @param date Day to get transactions for
     * @return successful operation
     */
    getDayTransactions(date: Date): Promise<DailyTransactions> {
        let url_ = this.baseUrl + "/ledger/by-date/{date}";
        if (date === undefined || date === null)
            throw new Error("The parameter 'date' must be defined.");
        url_ = url_.replace("{date}", encodeURIComponent(date ? date.toISOString().substring(0,10) : "null")); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetDayTransactions(_response);
        });
    }

    protected processGetDayTransactions(response: Response): Promise<DailyTransactions> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? DailyTransactions.fromJS(resultData200) : new DailyTransactions();
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DailyTransactions>(<any>null);
    }
}

export class LedgerEntry implements ILedgerEntry {
    id!: number;
    userId!: number;
    merchant!: string;
    amount!: number;
    dateTime!: Date;

    constructor(data?: ILedgerEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.userId = data["userId"];
            this.merchant = data["merchant"];
            this.amount = data["amount"];
            this.dateTime = data["dateTime"] ? new Date(data["dateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): LedgerEntry {
        data = typeof data === 'object' ? data : {};
        let result = new LedgerEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["merchant"] = this.merchant;
        data["amount"] = this.amount;
        data["dateTime"] = this.dateTime ? this.dateTime.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ILedgerEntry {
    id: number;
    userId: number;
    merchant: string;
    amount: number;
    dateTime: Date;
}

export enum AccountType {
    Banker = "banker", 
    Customer = "customer", 
    Analyst = "analyst", 
}

export class User implements IUser {
    id!: number;
    name!: string;
    username!: string;
    password?: string;
    ssn!: string;
    accountType!: AccountType;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.username = data["username"];
            this.password = data["password"];
            this.ssn = data["ssn"];
            this.accountType = data["accountType"];
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["username"] = this.username;
        data["password"] = this.password;
        data["ssn"] = this.ssn;
        data["accountType"] = this.accountType;
        return data; 
    }
}

export interface IUser {
    id: number;
    name: string;
    username: string;
    password?: string;
    ssn: string;
    accountType: AccountType;
}

export class Body implements IBody {
    name!: string;
    username!: string;
    password?: string;
    ssn!: string;
    accountType!: AccountType;

    constructor(data?: IBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.username = data["username"];
            this.password = data["password"];
            this.ssn = data["ssn"];
            this.accountType = data["accountType"];
        }
    }

    static fromJS(data: any): Body {
        data = typeof data === 'object' ? data : {};
        let result = new Body();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["username"] = this.username;
        data["password"] = this.password;
        data["ssn"] = this.ssn;
        data["accountType"] = this.accountType;
        return data; 
    }
}

export interface IBody {
    name: string;
    username: string;
    password?: string;
    ssn: string;
    accountType: AccountType;
}

export class Body2 implements IBody2 {
    /** The password for login in clear text */
    password!: string;
    userName?: string;

    constructor(data?: IBody2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.password = data["password"];
            this.userName = data["userName"];
        }
    }

    static fromJS(data: any): Body2 {
        data = typeof data === 'object' ? data : {};
        let result = new Body2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["password"] = this.password;
        data["userName"] = this.userName;
        return data; 
    }
}

export interface IBody2 {
    /** The password for login in clear text */
    password: string;
    userName?: string;
}

export class Body3 implements IBody3 {
    merchant!: string;
    amount!: number;

    constructor(data?: IBody3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.merchant = data["merchant"];
            this.amount = data["amount"];
        }
    }

    static fromJS(data: any): Body3 {
        data = typeof data === 'object' ? data : {};
        let result = new Body3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["merchant"] = this.merchant;
        data["amount"] = this.amount;
        return data; 
    }
}

export interface IBody3 {
    merchant: string;
    amount: number;
}

export class UserTransactions implements IUserTransactions {
    balance!: number;
    /** List of transactions in order from most recent to least recent */
    transactions!: LedgerEntry[];

    constructor(data?: IUserTransactions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.transactions = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.balance = data["balance"];
            if (data["transactions"] && data["transactions"].constructor === Array) {
                this.transactions = [] as any;
                for (let item of data["transactions"])
                    this.transactions!.push(LedgerEntry.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserTransactions {
        data = typeof data === 'object' ? data : {};
        let result = new UserTransactions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["balance"] = this.balance;
        if (this.transactions && this.transactions.constructor === Array) {
            data["transactions"] = [];
            for (let item of this.transactions)
                data["transactions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUserTransactions {
    balance: number;
    /** List of transactions in order from most recent to least recent */
    transactions: LedgerEntry[];
}

export class DailyTransactions implements IDailyTransactions {
    /** Sum of the value of all the transactions on the given date */
    cashFlow!: number;
    /** List of transactions in order from most recent to least recent */
    transactions!: LedgerEntry[];

    constructor(data?: IDailyTransactions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.transactions = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.cashFlow = data["cashFlow"];
            if (data["transactions"] && data["transactions"].constructor === Array) {
                this.transactions = [] as any;
                for (let item of data["transactions"])
                    this.transactions!.push(LedgerEntry.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DailyTransactions {
        data = typeof data === 'object' ? data : {};
        let result = new DailyTransactions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cashFlow"] = this.cashFlow;
        if (this.transactions && this.transactions.constructor === Array) {
            data["transactions"] = [];
            for (let item of this.transactions)
                data["transactions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IDailyTransactions {
    /** Sum of the value of all the transactions on the given date */
    cashFlow: number;
    /** List of transactions in order from most recent to least recent */
    transactions: LedgerEntry[];
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if(result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}